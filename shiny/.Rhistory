# Make sure to properly handle strings
grades <- data.frame(
students,
math_grades,
spanish_grades
#stringsAsFactors = FALSE
)
print(head(grades))
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(
students,
math_grades,
spanish_grades,
stringsAsFactors = FALSE
)
print(head(grades))
# Add a new column `grade_diff` to your data frame, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
grades$grade_diff <- grade$math_grades - grades$spanish_grades
# Add a new column `grade_diff` to your data frame, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
grades$grade_diff <- grades$math_grades - grades$spanish_grades
View(grades)
View(grades)
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
grades$better_at_math <- grades$math_grades > grades$spanish_grades
View(grades)
View(grades)
View(grades)
View(grades)
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- sum(grades$better_at_math)
num_better_at_math <- nrow(grades[grades$better_at_math == TRUE])
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- sum(grades$better_at_math)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
is.data.frame(Titanic)
# Create a variable `titanic_df` by converting `Titanic` into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Hint: Be sure to **not** treat strings as factors!
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
is.data.frame(titanic_df)
carriers
carriers.r
shiny::runApp('INFO201/a6-shiny-wills0ng')
shiny::runApp('INFO201/final-project-wills0ng/shiny')
# Overview page
overview <- tabPanel(
titlePanel("Overview"),
fluidPage(
h2("Overview"),
p("Los Angeles City is ranked as the fifth-worst traffic in the nation.
That being said, there are a lot of traffic collisions. Because
of this, we decided to analyze a substantial amount of collision data
to see if we could find helpful insights and patterns that may help
guide policymakers."),
h2("Key Questions"),
p("+++"), # TODO: Make a bulleted list, Increase margins in CSS
p("What areas are more congested and accident prone during rush hour?"),
p("What are the number of collisions by age and gender?"),
p("Unfortunately, the data set answers more questions about ...
rather than preventing accidents from occuring."), # TODO: complete sentence
h2("Explore"),
p("Use this app to explore these questions")
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
# Overview page
overview <- tabPanel(
titlePanel("Overview"),
fluidPage(
h2("Overview"),
p("+++"), # TODO: Increase margins in CSS
p("Los Angeles City is ranked as the ",
a(href="https://la.curbed.com/2019/2/13/18222225/los-angeles-traffic-worst-nation-hours",
"fifth-worst traffic"), " in the nation.
That being said, there are a lot of traffic collisions. Because
of this, we decided to analyze a substantial amount of collision data
to see if we could find helpful insights and patterns that may help
guide policymakers.",
),
p("The dataset used in this analysis is the publicly available ",
a(href="https://data.lacity.org/A-Safe-City/Traffic-Collision-Data-from-2010-to-Present/d5tf-ez2w/data",
"LAPDâ€™s City Traffic Collision Data"), "filtered by the most recent
year available, which is all of 2019."
),
h2("Key Questions"),
p("+++"), # TODO: Make a bulleted list, Increase margins in CSS
p("*How many traffic accidents occured in LA in 2019â€”based on data?"),
p("*What is the relationship between time of day, day of week and the
number of traffic incidents occuring?"),
p("*What areas are more congested and accident prone during rush hour?"),
p("*What are the number of collisions by age and gender?"),
# p("Unfortunately, the data set answers more questions about ...
# rather than preventing accidents from occuring."), # TODO: complete sentence
h2("Explore"),
p("+++"), # TODO: Increase margins in CSS
p("Use this app to explore these questions")
)
)
# Age and gender page
age_and_gender <- tabPanel(
titlePanel("Age and Gender"),
sidebarLayout(
sidebarPanel(
# Put interactivity widgets here
h1("Victim Age vs Accidents"),
sliderInput(inputId = "group",
label = "Age Interval Size",
min = 5,
max = 20,
value = 10),
selectInput(inputId = "gender",
label = "Gender",
choices = c("All", "Male", "Female", "Other"),
selected = "All"),
selectInput(
inputId = "male_color",
label = "Male Color:",
choices = c(
"Black" = "black",
"Gray" = "gray",
"Blue" = "blue",
"Green" = "forestgreen",
"Red" = "red",
"Pink" = "pink",
"Light Blue" = "light blue"),
selected = "light blue"),
selectInput(
inputId = "female_color",
label = "Female Color:",
choices = c(
"Black" = "black",
"Gray" = "gray",
"Blue" = "blue",
"Green" = "forestgreen",
"Red" = "red",
"Pink" = "pink",
"Light Blue" = "light blue"),
selected = "red"),
selectInput(
inputId = "other_color",
label = "Other Color:",
choices = c(
"Black" = "black",
"Gray" = "gray",
"Blue" = "blue",
"Green" = "forestgreen",
"Red" = "red",
"Pink" = "pink",
"Light Blue" = "light blue"),
selected = "forestgreen"),
),
mainPanel(
plotlyOutput("age_and_gender")
)
)
)
# Time and day page
time_and_day <- tabPanel(
titlePanel("Time and Day"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "time_selection",
label = "Select Time of Day:",
choices = c("Morning", "Afternoon", "Evening", "Night"),
selected = "Morning"
),
# Histogram color
selectInput(
inputId = "histogram_color",
label = "Select Color:",
choices = c(
"Black" = "black", "Gray" = "gray", "Blue" = "blue",
"Green" = "forestgreen", "Red" = "red", "Pink" = "pink"
),
selected = "blue"
),
# Histogram size
sliderInput(
inputId = "histogram_size",
label = "Histogram Size:",
min = 0.1,
max = 1,
value = 0.9,
step = 0.1
)
),
mainPanel(
plotlyOutput("time_and_day")
)
)
)
#
collisions_map <- tabPanel(
titlePanel("Collision Map"),
sidebarLayout(
sidebarPanel(
# Put interactivity widgets here
),
mainPanel(
plotOutput("collisions_map")
)
)
)
takeaways <- tabPanel(
titlePanel("Takeaways"),
#  takeaways <- tabPanel(
titlePanel("Takeaways"),
fluidPage(
h2("Age and Gender"),
p("According to the demographics collected,
age range from 36 to 55 records the highest
number of accidents.  Furthermore, regardless
of age, males were involved in the highest number
of accidents out of all genders."),
p("The possible reason for this may be due to
higher car ownership. Those who are in
the age range from 36 to 55 are the ones
that are actively involved in economic
activities, they are more likely to be on
the road. As a further implication, males
are more likely to get involved in the business
that requires heavy vehicle driving."),
h2("Time and Day"),
p("Friday afternoon and evening record the highest number of
accidents out of all times and days with the record of 2731.
On the other hand, morning, afternoon, and evening of Sunday
record the lowest number of accidents with 1440, 1590, 1965
respectively."),
p("The possible reason for Friday recording the
highest number of accidents may be due to
an increase in floating population the
possible rationales behind this are students
going back home, people going out for dinner,
and so on.")
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
shiny::runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
# Age and gender page
age_and_gender <- tabPanel(
title = "Age and Gender",
titlePanel("Accidents by Age and Gender"),
sidebarLayout(
sidebarPanel(
# Put interactivity widgets here
sliderInput(inputId = "group",
label = "Age Interval Size",
min = 5,
max = 20,
value = 10),
selectInput(inputId = "gender",
label = "Gender",
choices = c("All", "Male", "Female", "Other"),
selected = "All"),
selectInput(
inputId = "male_color",
label = "Male Color:",
choices = c(
"Black" = "black",
"Gray" = "gray",
"Blue" = "blue",
"Green" = "forestgreen",
"Red" = "red",
"Pink" = "pink",
"Light Blue" = "light blue"),
selected = "light blue"),
selectInput(
inputId = "female_color",
label = "Female Color:",
choices = c(
"Black" = "black",
"Gray" = "gray",
"Blue" = "blue",
"Green" = "forestgreen",
"Red" = "red",
"Pink" = "pink",
"Light Blue" = "light blue"),
selected = "red"),
selectInput(
inputId = "other_color",
label = "Other Color:",
choices = c(
"Black" = "black",
"Gray" = "gray",
"Blue" = "blue",
"Green" = "forestgreen",
"Red" = "red",
"Pink" = "pink",
"Light Blue" = "light blue"),
selected = "forestgreen"),
),
mainPanel(
plotlyOutput("age_and_gender")
)
)
)
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
runApp('INFO201/final-project-wills0ng/shiny')
library("ggplot2")
# Load dataframe
collisions <- read.csv("../data/latraffic2019-collisions.csv",
stringsAsFactors = FALSE)
setwd("~/INFO201/final-project-wills0ng/shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- df %>%
separate(Location, c("lat", "long"), ", ") %>%
mutate(
lat = as.numeric(gsub("\\(", "", lat)),
long = as.numeric(gsub("\\)", "", long)),
) %>%
group_by(Area.Name)
df <- df %>%
separate(Location, c("lat", "long"), ", ") %>%
mutate(
lat = as.numeric(gsub("\\(", "", lat)),
long = as.numeric(gsub("\\)", "", long)),
) %>%
group_by(Area.Name)
View(df)
View(df)
# Load dataframe
df <- read.csv("../data/latraffic2019-collisions.csv",
stringsAsFactors = FALSE)
View(df)
View(df)
df <- df %>%
separate(Location, c("lat", "long"), ", ") %>%
mutate(
lat = as.numeric(gsub("\\(", "", lat)),
long = as.numeric(gsub("\\)", "", long)),
) %>%
group_by(Area.Name)
View(df)
View(df)
# Load dataframe
df <- read.csv("../data/latraffic2019-collisions.csv",
stringsAsFactors = FALSE)
df <- read.csv("../data/latraffic2019-collisions.csv",
stringsAsFactors = FALSE)
df %>%
separate(Location, c("lat", "long"), ", ") %>%
mutate(
lat = as.numeric(gsub("\\(", "", lat)),
long = as.numeric(gsub("\\)", "", long)),
) %>%
group_by(Area.Name)
df %>%
separate(Location, c("lat", "long"), ", ") %>%
mutate(
lat = as.numeric(gsub("\\(", "", lat)),
long = as.numeric(gsub("\\)", "", long)),
) %>%
group_by(Area.Name) %>%
summarize(num_collisions = n())
runApp()
View(df)
View(df)
View(df)
View(df)
runApp()
runApp()
df_filtered <- df
area_summary <- df_filtered %>%
separate(Location, c("lat", "long"), ", ") %>%
mutate(
lat = as.numeric(gsub("\\(", "", lat)),
long = as.numeric(gsub("\\)", "", long)),
) %>%
group_by(Area.Name) %>%
summarize(num_collisions = n(),
lat = mean(lat),
long = mean(long))
View(area_summary)
View(area_summary)
# Define color pallete for LA area regions
color_count <- nrow(area_summary)
palette_fn <- colorFactor(topo.colors(21), domain = area_summary$Area.Name)
runApp()
View(area_summary)
View(area_summary)
runApp()
runApp()
runApp()
View(area_summary)
area_summary$num_collisions ^ .3
area_summary$num_collisions ^ 2
(area_summary$num_collisions ^ 2)/1000000
(area_summary$num_collisions ^ 2.5)/1000000
(area_summary$num_collisions ^ 2.5)/10000000
(area_summary$num_collisions ^ 3)/10000000
(area_summary$num_collisions ^ 3)/100000000
(area_summary$num_collisions ^ 2.5)/100000000
runApp()
sd_collisions <- sd(area_summary$num_collisions)
mean_collisions <- mean(area_summary$num_collisions)
rm(mean_collisions)
rm(sd_collisions)
min_collisions <- min(area_summary$num_collisions)
max_collisions <- max(area_summary$num_collisions)
rm(min_collisions)
rm(max_collisions)
normalize(area_summary$num_collisions, range = c(0, 100))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df %>%
mutate(day_of_week = weekdays(as.Date(Date.Occurred,
format = "%m/%d/%Y"))) %>%
mutate_if(time_of_day = ~ case_when(
Time.Occurred >= 500 & Time.Occurred <= 1159 ~ "Morning",
Time.Occurred >= 1200 & Time.Occurred <= 1659 ~ "Afternoon",
Time.Occurred >= 1700 & Time.Occurred <= 2059 ~ "Evening",
(Time.Occurred >= 2100 & Time.Occurred <= 2400) |
(Time.Occurred >= 1 & Time.Occurred <= 459) ~ "Night"
)
) %>%
filter(day_of_week == day, time_of_day == time)
df %>%
mutate(day_of_week = weekdays(as.Date(Date.Occurred,
format = "%m/%d/%Y")),
time_of_day = ~ case_when(
Time.Occurred >= 500 & Time.Occurred <= 1159 ~ "Morning",
Time.Occurred >= 1200 & Time.Occurred <= 1659 ~ "Afternoon",
Time.Occurred >= 1700 & Time.Occurred <= 2059 ~ "Evening",
(Time.Occurred >= 2100 & Time.Occurred <= 2400) |
(Time.Occurred >= 1 & Time.Occurred <= 459) ~ "Night"
)
) %>%
filter(day_of_week == day, time_of_day == time)
df %>%
mutate(day_of_week = weekdays(as.Date(Date.Occurred,
format = "%m/%d/%Y")),
time_of_day = case_when(
Time.Occurred >= 500 & Time.Occurred <= 1159 ~ "Morning",
Time.Occurred >= 1200 & Time.Occurred <= 1659 ~ "Afternoon",
Time.Occurred >= 1700 & Time.Occurred <= 2059 ~ "Evening",
(Time.Occurred >= 2100 & Time.Occurred <= 2400) |
(Time.Occurred >= 1 & Time.Occurred <= 459) ~ "Night"
)
) %>%
filter(day_of_week == day, time_of_day == time)
df %>%
mutate(day_of_week = weekdays(as.Date(Date.Occurred,
format = "%m/%d/%Y")),
time_of_day = case_when(
Time.Occurred >= 500 & Time.Occurred <= 1159 ~ "Morning",
Time.Occurred >= 1200 & Time.Occurred <= 1659 ~ "Afternoon",
Time.Occurred >= 1700 & Time.Occurred <= 2059 ~ "Evening",
(Time.Occurred >= 2100 & Time.Occurred <= 2400) |
(Time.Occurred >= 1 & Time.Occurred <= 459) ~ "Night"
)
) %>% head(10)
runApp()
runApp()
runApp()
runApp()
runApp()
