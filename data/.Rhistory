twenty_seven <- cube(27)
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(value) {
value * 2.54
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 66
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(value) {
return(value * 2.54)
}
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
inches_to_cm(inches_tall)
str_count("Zebraz","zZ")
str_count("Zebraz","Z")
str_count("Zebraz","Z|z")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs(Zebraz,Cow)
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs(Zebraz, Cows)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables and return the argument which has more occurrences of "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
num_z_1 <- str_count(string1, "Z|z")
num_z_2 <- str_count(string2, "Z|z")
if (num_z_1 > num_z_2) {
return(string1)
} else if (num_z_1 < num_z_2) {
return(string2)
} else if (num_z_1 == num_z_2) {
return("The strings have the same number of Zs.")
} else {
return("Neither string contains the letter z.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs(Zebraz, Cows)
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Zebraz", "Cows")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Zebraz", "Cowz")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Zebraz", "Cowzz")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Zebraz", "CowzZ")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Zebra", "CowzZ")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Sebra", "Cowsss")
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables and return the argument which has more occurrences of "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
num_z_1 <- str_count(string1, "Z|z")
num_z_2 <- str_count(string2, "Z|z")
if (num_z_1 > num_z_2) {
return(string1)
} else if (num_z_1 < num_z_2) {
return(string2)
} else if (num_z_1 == num_z_2) {
return("The strings have the same number of Zs.")
} else if (num_z_1 + num_z_2 == 0) {
return("Neither string contains the letter z.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Sebra", "Cowsss")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Sebra", "Cowsss")
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables and return the argument which has more occurrences of "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
num_z_1 <- str_count(string1, "Z|z")
num_z_2 <- str_count(string2, "Z|z")
if (num_z_1 > num_z_2) {
return(string1)
} else if (num_z_1 < num_z_2) {
return(string2)
} else if (num_z_1 == num_z_2) {
return("The strings have the same number of Zs.")
} else if (num_z_1 + num_z_2 == 0) {
return("Neither string contains the letter z.")
}
}
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables and return the argument which has more occurrences of "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
num_z_1 <- str_count(string1, "Z|z")
num_z_2 <- str_count(string2, "Z|z")
if (num_z_1 > num_z_2) {
return(string1)
} else if (num_z_1 < num_z_2) {
return(string2)
} else if (num_z_1 == num_z_2) {
return("The strings have the same number of Zs.")
} else if (num_z_1 + num_z_2 == 0) {
return("Neither string contains the letter z.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Sebra", "Cowsss")
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables and return the argument which has more occurrences of "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
num_z_1 <- str_count(string1, "Z|z")
num_z_2 <- str_count(string2, "Z|z")
if (num_z_1 > num_z_2) {
return(string1)
} else if (num_z_1 < num_z_2) {
return(string2)
} else if (num_z_1 + num_z_2 == 0) {
return("Neither string contains the letter z.")
} else if (num_z_1 == num_z_2) {
return("The strings have the same number of Zs.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Sebra", "Cowsss")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Zebraz", "Cows")  # Zebraz
more_zs <- has_more_zs("Zebra", "CowZz")  # CowZz
more_zs <- has_more_zs("Zebraz", "CowZz")  # Same
more_zs <- has_more_zs("Sebra", "Cowsss")  # Neither
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Skyfall", "Trading Places",
"Ferris Bueller's Day Off", "Stargate",
"The Untouchables", "Up")
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- c(1:3)
source('~/INFO201/a2-coreskills-wills0ng/assignment.R', echo=TRUE)
print(top_three)
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- movies(1:3)
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- c(movies = 1:3)
print(top_three)
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- movies[1]
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- movies[1:3]
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Skyfall", "Trading Places",
"Ferris Bueller's Day Off", "Stargate",
"Parasite", "Up")
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- movies[1:3]
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Skyfall", "Trading Places",
"Ferris Bueller's Day Off", "Stargate",
"Parasite", "Office Space")
# Create a vector `top_three` that only contains the first three movies of
# your `movies` list (e.g., index 1 through index 3)
# You should do this by subsetting the vector, do not just retype the movies
top_three <- movies[1:3]
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Kindergarden Cop", "Trading Places",
"Ferris Bueller's Day Off", "Office Space",
"Parasite", "Back To The Future")
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Kindergarden Cop", "Trading Places",
"Ferris Bueller's Day Off", "Office Space",
"Back To The Future", "Parasite")
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase " is a great movie!" to the end of each element in `movies`
excited <- paste(movies[1:6], "is a great movie!")
print(excited)
# Create a vector `without_four` that omits the fourth element from `movies`
# You should do this by using a _negative index_
without_four <- movies[-4]
print(without_four)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- 4:400
indx <- v1 %%4
indx <- multiples_of_4 %%4
fours <- multiples_of_4[!indx]
others <- multiples_of_4[!!indx]
print(indx)
print(fours)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
seq(4, 400, 4)
c(1:100)*4
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
multiples_of_8 <- multiples_of_4 %% 8
print(multiples_of_8)
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
print(numbers)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
multiples_of_8 <-
multiples_of_4 %% 8 == 0
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
multiples_of_8 <-
print(multiples_of_4 %% 8 == 0)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Hints:
# - See chapter 7.4 in the book for vector filtering
# - Google search "modulo operator in R"
multiples_of_8 <- multiples_of_4[multiples_of_4 %% 8 == 0]
print(multiples_of_8)
(1:100)*4 # alternative way to do it
gsub("[:digit:]", "", "I ate 3 bananas")
gsub("[[:digit:]]", "", "I ate 3 bananas")
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
gsub("[[:digit:]]", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
trimws(gsub("[[:digit:]]", "", strings))
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of the vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of the vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of the vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in the `numbers` vector
# that are lower than `numbers_mean`
# Hint: Use vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
print(lower_numbers)
# Create a vector `higher_numbers` that the values in the `numbers` vector
# that are higher than `numbers_mean`
# Hint: Again, use vector filtering
higher_numbers <- numbers[numbers > numbers_mean]
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above.
# The list should contain the following _named_ keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = numbers_len,
mean = numbers_mean,
median = numbers_median
)
View(summary_info)
View(summary_info)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(numbers) {
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
return(summary_info)
}
# Create a list `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
View(summary_1_to_100)
View(summary_1_to_100)
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- paste(Student(1:50))
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- paste("Student", (1:50))
print(students)
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- paste("Student", 1:1000)
# Create a vector `math_grades` that holds 1000 random values in it that
# represent grades in a math course
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
# Hint: Lookup `rnorm()`
math_grades <- rnorm(1000, 88, 10)
# In the `math_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: Vector filtering
math_grades[math_grades > 100]
# In the `math_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: Vector filtering
math_grades[math_grades > 100] <- 100
print(max(math_grades)
print(max(math_grades))
print(length(math_grades))
# Create a vector `spanish_grades` that holds 1000 random values in it that
# represent grades in a spanish course
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
# Hint: Lookup `rnorm()`
spanish_grades <- rnorm(1000, 85, 12)
# In the `spanish_grades` vector, replace any values that are above 100 with
# the number 100
# Hint: More vector filtering
spanish_grades[spanish_grades > 100] <- 100
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(math_grades, spanish_grades)
View(grades)
View(grades)
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(students, math_grades, spanish_grades)
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(as.character(students), math_grades, spanish_grades)
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(
students = as.character(students),
math_grades = math_grades,
spanish_grades = spanish_grades)
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(students, math_grades, spanish_grades)
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
num_students <- subset(grades)
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
num_students <- subset(grades, count.fields(TRUE))
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
num_students <- subset(grades, count.fields())
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
num_students <- subset(count.fields(grades))
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
num_students <- count.fields(grades)
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(students, math_grades, spanish_grades, stringAsFactors = FALSE)
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(students, math_grades, spanish_grades)
# Create a variable `num_students` that counts the
# number of rows in your dataframe `grades`
num_students <- nrow(grades)
# Create a variable `num_courses` that counts the number of courses stored
# in the columns of your `grades` data frame
num_courses <- ncol(grades) - 1
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(
students,
math_grades,
spanish_grades
stringsAsFactors = FALSE
)
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(
students,
math_grades,
spanish_grades,
stringsAsFactors = FALSE
)
View(grades)
View(grades)
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(
students,
math_grades,
spanish_grades
#stringsAsFactors = FALSE
)
print(head(grades))
# Create a data frame variable named `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(
students,
math_grades,
spanish_grades,
stringsAsFactors = FALSE
)
print(head(grades))
# Add a new column `grade_diff` to your data frame, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
grades$grade_diff <- grade$math_grades - grades$spanish_grades
# Add a new column `grade_diff` to your data frame, which is equal to
# `grades$math_grades` minus `grades$spanish_grades`
grades$grade_diff <- grades$math_grades - grades$spanish_grades
View(grades)
View(grades)
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
grades$better_at_math <- grades$math_grades > grades$spanish_grades
View(grades)
View(grades)
View(grades)
View(grades)
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- sum(grades$better_at_math)
num_better_at_math <- nrow(grades[grades$better_at_math == TRUE])
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- sum(grades$better_at_math)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
is.data.frame(Titanic)
# Create a variable `titanic_df` by converting `Titanic` into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Hint: Be sure to **not** treat strings as factors!
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
is.data.frame(titanic_df)
carriers
carriers.r
setwd("~/INFO201/final-project-wills0ng/data")
